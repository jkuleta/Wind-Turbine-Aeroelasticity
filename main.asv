% Wind Turbine Aeroelasticity Simulation
clc
close all;
clear all;

[StructuralParameters, OperationalParameters, AeroParameters] = load_data();

%% Simulation setup
sinusoidal = false;
dynamic_inflow = false; % Set to true if you want to include dynamic inflow
vinduced = 0; % Initial induced velocity
K_CG = false; % Set to true if you want to include centrifugal and gravity stiffening
OneSpeed = true; %Run only for 15ms 
dt = 0.1;
tf = 120;
t = 0:dt:tf;
psi = 0; % Assuming blade starts vertical, 0 radians

Moments = zeros(2, length(t));

if sinusoidal
    OperationalParameters.V_sin = 15+0.5*cos(1.267*t) + 0.085*cos(2.534*t)+ 0.015*cos(3.801*t);

    % Find the index of a specific wind speed in OperationalParameters.v0_values
    target_windspeed = 15; % example wind speed to find
    [~, windspeed_idx] = min(abs(OperationalParameters.v0_values - target_windspeed));

    pitch = OperationalParameters.pitch_values(windspeed_idx);
    omega = OperationalParameters.omega_values(windspeed_idx);

    V = OperationalParameters.V_sin(1)*ones(size(AeroParameters.radius_aero));
    omega = omega*ones(size(AeroParameters.radius_aero));
    omega_org = omega;
    V_org = V(1);

    % ODE45 integration
    if K_CG
        psi = 0;
        total_K = get_total_K(StructuralParameters, omega(1), psi);
    else
        total_K = StructuralParameters.K;
    end

    Y0 = [0; 0; 0; 0]; % [x1; x2; dx1; dx2]
    [t_out, Y_out] = ode45(@(tt, YY) odefun_blade(tt, YY, V, omega, pitch, StructuralParameters.M, StructuralParameters.C, total_K, AeroParameters), t, Y0);

    x = Y_out(:,1:2)';
    dx = Y_out(:,3:4)';

    tip_deflection = [x(1,:)*StructuralParameters.phi_1flap(end); x(2,:)*StructuralParameters.phi_1edge(end)];

else
    if OneSpeed 
        % Find the index of a specific wind speed in OperationalParameters.v0_values
        target_windspeed = 15; % example wind speed to find
        [~, windspeed_idx] = min(abs(OperationalParameters.v0_values - target_windspeed));
    
        pitch = OperationalParameters.pitch_values(windspeed_idx);
        omega = OperationalParameters.omega_values(windspeed_idx);

        OperationalParameters.v0_values = OperationalParameters.v0_values(windspeed_idx);
        OperationalParameters.pitch_values = OperationalParameters.pitch_values(windspeed_idx);
        OperationalParameters.omega_values = OperationalParameters.omega_values(windspeed_idx);
    else    
        tip_deflection = zeros(2, length(OperationalParameters.v0_values));
    end

    for i = 1:length(OperationalParameters.v0_values)
        if i == 1
            hWait = waitbar(0, 'Running simulation...');
        end

        if mod(i, max(1, floor((length(OperationalParameters.v0_values) - 1) / 100))) == 0 || i == length(OperationalParameters.v0_values)
            waitbar(i / length(OperationalParameters.v0_values), hWait, ...
                sprintf('Running simulation... %5.1f%%', (i / length(OperationalParameters.v0_values)) * 100));
        end

        if i == length(OperationalParameters.v0_values)
            close(hWait);
        end

        V_org = OperationalParameters.v0_values(i) * ones(size(AeroParameters.radius_aero));
        omega_org = OperationalParameters.omega_values(i) * ones(size(AeroParameters.radius_aero));
        pitch = OperationalParameters.pitch_values(i);

        if K_CG
            psi = 0;
            total_K = get_total_K(StructuralParameters, omega_org(1), psi);
        else
            total_K = StructuralParameters.K;
        end

        Y0 = [0; 0; 0; 0]; % [x1; x2; dx1; dx2]
        [dYdt, Moment] = odefun_blade(t, , V_org, omega_org, pitch, StructuralParameters.M, StructuralParameters.C, total_K, AeroParameters);
        [t_out, Y_out] = ode45(@(tt, YY) odefun_blade(tt, YY, V_org, omega_org, pitch, StructuralParameters.M, StructuralParameters.C, total_K, AeroParameters), t, Y0);
        x = Y_out(:,1:2)';
        dx = Y_out(:,3:4)';

        tip_deflection(:, i) = [x(1, end)* StructuralParameters.phi_1flap(end); x(2, end)* StructuralParameters.phi_1edge(end)];

        Moments(:,i) = Moment;
    end

    % figure;
    % plot(OperationalParameters.v0_values, tip_deflection(1,:), 'LineWidth', 1.5,'Marker','x'); hold on;
    % plot(OperationalParameters.v0_values, tip_deflection(2,:), 'LineWidth', 1.5, 'Marker', 'x'); 
    % grid on;
    % legend('Flapwise', 'Edgewise');
    % xlabel('Wind Speed [m/s]');
    % ylabel('Tip Deflection [m]');
end

%% Plotting
figure;

% Use default MATLAB color order
co = get(gca, 'ColorOrder');

% Compute average displacement in each direction
avg_flap = mean(x(1,:));
avg_edge = mean(x(2,:));

% Flapwise displacement and velocity
subplot(2,1,1);
plot(t_out, x(1,:), 'LineWidth', 2, 'Color', co(1,:)); hold on;
plot(t_out, dx(1,:), '--', 'LineWidth', 2, 'Color', co(1,:));
plot(t_out, avg_flap*ones(size(t_out)), ':', 'LineWidth', 1.5, 'Color', 'k'); % average as dotted line
hold off;
xlabel('Time [s]');
ylabel('Flapwise');
legend('Displacement', 'Velocity');
title('Flapwise Displacement and Velocity vs Time');
grid on;

% Edgewise displacement and velocity
subplot(2,1,2);
plot(t_out, x(2,:), 'LineWidth', 2, 'Color', co(2,:)); hold on;
plot(t_out, dx(2,:), '--', 'LineWidth', 2, 'Color', co(2,:));
plot(t_out, avg_edge*ones(size(t_out)), ':', 'LineWidth', 1.5, 'Color', 'k'); % average as dotted line
hold off;
xlabel('Time [s]');
ylabel('Edgewise');
legend('Displacement', 'Velocity');
title('Edgewise Displacement and Velocity vs Time');
grid on;

figure;
plot(t_out, Moments(1,:), 'LineWidth', 2, 'DisplayName', 'Flapwise'); hold on;
plot(t_out, Moments(2,:), 'LineWidth', 2, 'DisplayName', 'Edgewise');
grid on;
xlabel('Time [s]');
ylabel('Root Bending Moment');


if sinusoidal
    plot(t, OperationalParameters.V_sin, 'LineWidth', 2, 'Color', co(3,:));
    xlabel('Time [s]');
    ylabel('Wind Speed [m/s]');
    grid on;
    title('Wind Speed');
end