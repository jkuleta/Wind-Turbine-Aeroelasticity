% Wind Turbine Aeroelasticity Simulation
clc
close all;
clear all;

global M C K radius_aero twist_aero phi_1flap_aero phi_1edge_aero

%% Load key parameters - AERODYNAMICS
load 'STATE'
v0_values = WindSpeeds;
omega_values = RtSpeeds * 2 * pi / 60;
pitch_values = PitchAngles;

%% Load structural blade data
structural_data = importdata("Structural data.txt");

radius = structural_data.data(:,1);
blade_position = structural_data.data(:,2);
mass_distribution = structural_data.data(:, 5);
flap_stiffness_distribution = structural_data.data(:, 6);
edge_stiffness_distribution = structural_data.data(:, 7);
R = radius(end);

%% Damping
damping_flapwise = 0.477465e-2;
damping_edgewise = damping_flapwise;

%% Shape functions
phi_1flap = 0.0622*blade_position.^2 + 1.7254*blade_position.^3 - ...
            3.2452*blade_position.^4 + 4.7131*blade_position.^5 - 2.2555*blade_position.^6;
ddphi_1flap = 2*.0622/(R^2) + 2*3*1.7254*radius/(R^3) - ...
              3*4*3.2452*radius.^2/(R^4) + 4*5*4.7131*radius.^3/(R^5) - ...
              5*6*2.2555*radius.^4/(R^6);

phi_1edge = 0.3627*blade_position.^2 + 2.5337*blade_position.^3 - ...
            3.5772*blade_position.^4 + 2.376*blade_position.^5 - 0.6952*blade_position.^6;
ddphi_1edge = 2*0.3627/(R^2) + 2*3*2.5337*radius/(R^3) - ...
              3*4*3.5772*radius.^2/(R^4) + 4*5*2.376*radius.^3/(R^5) - ...
              5*6*0.6952*radius.^4/(R^6);

%% Mass & Stiffness
M_1flap = trapz(radius, mass_distribution.*(phi_1flap.^2));
M_1edge = trapz(radius, mass_distribution.*(phi_1edge.^2));
K_1flap = trapz(radius, flap_stiffness_distribution.*(ddphi_1flap.^2));
K_1edge = trapz(radius, edge_stiffness_distribution.*(ddphi_1edge.^2));

M = diag([M_1flap, M_1edge]);
K = diag([K_1flap, K_1edge]);
C = diag([2*damping_flapwise * sqrt(K_1flap*M_1flap), ...
          2*damping_edgewise * sqrt(K_1edge*M_1edge)]);

%% Natural frequencies
omega_1flap = sqrt(K_1flap/M_1flap);
omega_1edge = sqrt(K_1edge/M_1edge);

%% Aerodynamic properties
blade_data = importdata('Blade\Blade section\Blade section.dat');
twist_aero = blade_data.data(:,5);
radius_aero = blade_data.data(:,3);
blade_position_aero = radius_aero/R;

phi_1flap_aero = 0.0622*blade_position_aero.^2 + 1.7254*blade_position_aero.^3 - ...
                 3.2452*blade_position_aero.^4 + 4.7131*blade_position_aero.^5 - ...
                 2.2555*blade_position_aero.^6;
phi_1edge_aero = 0.3627*blade_position_aero.^2 + 2.5337*blade_position_aero.^3 - ...
                 3.5772*blade_position_aero.^4 + 2.376*blade_position_aero.^5 - ...
                 0.6952*blade_position_aero.^6;

%% Simulation setup
i = 14;
dt = 0.01;
tf = 5;
t = 0:dt:tf;

x = zeros(2, length(t));
dx = zeros(2, length(t));
ddx = zeros(2, length(t));

V_org = v0_values(i) * ones(size(radius_aero));
omega_org = omega_values(i) * ones(size(radius_aero));
pitch = pitch_values(i);

V = V_org;
omega = omega_org;

for j = 1:length(t)-1
    % Progress bar (textual)
    current_progress = floor((j / (length(t)-1)) * progress_length);
if current_progress > last_progress
    % Update only when progress moves to a new block
    bar = repmat('#', 1, current_progress);
    bar = [bar repmat('-', 1, progress_length - current_progress)];
    fprintf('\rRunning simulation: [%s] %5.1f%%', bar, (j / (length(t)-1)) * 100);
    last_progress = current_progress;
end
    
    % Runge-Kutta integration
    A_rk = dt/2 * ddx(:,j);
    b_rk = dt/2 * (dx(:,j) + 0.5 * A_rk);
    
    B_rk = dt/2 * g(dx(:,j) + A_rk, x(:,j) + b_rk, V, omega, pitch);
    C_rk = dt/2 * g(dx(:,j) + B_rk, x(:,j) + b_rk, V, omega, pitch);
    d_rk = dt * (dx(:,j) + C_rk);
    D_rk = dt/2 * g(dx(:,j) + 2*C_rk, x(:,j) + d_rk, V, omega, pitch);
    
    x(:,j+1) = x(:,j) + dt*(dx(:,j) + 1/3*(A_rk + B_rk + C_rk));
    dx(:,j+1) = dx(:,j) + 1/3*(A_rk + 2*B_rk + 2*C_rk + D_rk);
    ddx(:,j+1) = g(dx(:,j), x(:,j), V, omega, pitch);

    % Velocity coupling
    velocity = [dx(1,j) * phi_1flap_aero; dx(2,j) * phi_1edge_aero];
    V_inplane = velocity(1,:) .* cos(pitch + twist_aero') - velocity(2,:) .* sin(pitch + twist_aero');
    V_outplane = velocity(1,:) .* sin(pitch + twist_aero') + velocity(2,:) .* cos(pitch + twist_aero');
    
    V = V_org - V_outplane;
    omega = omega_org - V_inplane ./ radius_aero;
end

%% Plotting
figure;
subplot(2,1,1);
plot(t, x(1,:), 'b', t, x(2,:), 'r');
xlabel('Time [s]');
ylabel('Displacement');
legend('Flapwise', 'Edgewise');
title('Displacement vs Time');

subplot(2,1,2);
plot(t, dx(1,:), 'b', t, dx(2,:), 'r');
xlabel('Time [s]');
ylabel('Velocity');
legend('Flapwise', 'Edgewise');
title('Velocity vs Time');
